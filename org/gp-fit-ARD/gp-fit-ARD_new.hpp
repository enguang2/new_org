
// Code generated by stanc b0a4f0db
#include <stan/model/model_header.hpp>
namespace gp_fit_ARD_new_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 37, column 2 to column 25)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 38, column 2 to column 22)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 39, column 2 to column 22)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 40, column 2 to column 16)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 43, column 2 to column 14)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 44, column 2 to column 19)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 46, column 2 to column 49)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 47, column 2 to column 16)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 65, column 0 to column 9)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 66, column 0 to column 8)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 68, column 4 to column 68)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 67, column 23 to line 69, column 1)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 67, column 0 to line 69, column 1)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 57, column 2 to column 24)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 58, column 2 to column 23)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 59, column 2 to column 23)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 60, column 2 to column 21)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 62, column 2 to column 23)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 26, column 2 to column 17)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 27, column 2 to column 17)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 28, column 14 to column 15)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 28, column 9 to column 10)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 28, column 2 to column 17)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 29, column 9 to column 10)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 29, column 2 to column 14)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 30, column 9 to column 10)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 30, column 2 to column 19)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 33, column 2 to column 13)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 34, column 2 to column 22)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 37, column 18 to column 19)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 40, column 9 to column 10)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 43, column 9 to column 10)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 44, column 9 to column 10)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 44, column 12 to column 13)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 6, column 4 to column 10)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 7, column 11 to column 18)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 7, column 20 to column 27)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 7, column 4 to column 31)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 8, column 4 to column 18)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 9, column 4 to column 18)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 10, column 4 to column 16)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 11, column 4 to column 20)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 12, column 4 to column 29)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 14, column 6 to column 33)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 16, column 8 to line 17, column 65)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 18, column 8 to column 26)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 15, column 27 to line 19, column 7)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 15, column 6 to line 19, column 7)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 13, column 29 to line 20, column 5)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 13, column 4 to line 20, column 5)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 21, column 4 to column 43)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 22, column 4 to column 33)",
                                                      " (in 'org/gp-fit-ARD/gp-fit-ARD_new.stan', line 5, column 40 to line 23, column 3)"};


template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>,
T3__>, -1, -1>
L_cov_exp_quad_ARD(const std::vector<Eigen::Matrix<T0__, -1, 1>>& x,
                   const T1__& alpha, const T2__& rho_arg__,
                   const T3__& delta, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          stan::value_type_t<T2__>,
          T3__>;
  const auto& rho = to_ref(rho_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 36;
    validate_non_negative_index("K", "size(x)", size(x));
    current_statement__ = 37;
    validate_non_negative_index("K", "size(x)", size(x));
    Eigen::Matrix<local_scalar_t__, -1, -1> K;
    K = Eigen::Matrix<local_scalar_t__, -1, -1>(size(x), size(x));
    stan::math::fill(K, DUMMY_VAR__);
    
    local_scalar_t__ neg_half;
    neg_half = DUMMY_VAR__;
    
    local_scalar_t__ sq_alpha;
    sq_alpha = DUMMY_VAR__;
    
    current_statement__ = 41;
    N = size(x);
    current_statement__ = 42;
    neg_half = -0.5;
    current_statement__ = 43;
    sq_alpha = square(alpha);
    current_statement__ = 50;
    for (int i = 1; i <= (size(x) - 1); ++i) {
      current_statement__ = 44;
      assign(K,
        cons_list(index_uni(i), cons_list(index_uni(i), nil_index_list())),
        (sq_alpha + delta), "assigning variable K");
      current_statement__ = 48;
      for (int j = (i + 1); j <= N; ++j) {
        current_statement__ = 45;
        assign(K,
          cons_list(index_uni(i), cons_list(index_uni(j), nil_index_list())),
          (sq_alpha *
            stan::math::exp(
              (neg_half *
                dot_self(elt_divide(subtract(x[(i - 1)], x[(j - 1)]), rho))))),
          "assigning variable K");
        current_statement__ = 46;
        assign(K,
          cons_list(index_uni(j), cons_list(index_uni(i), nil_index_list())),
          rvalue(K,
            cons_list(index_uni(i),
              cons_list(index_uni(j), nil_index_list())), "K"),
          "assigning variable K");}}
    current_statement__ = 51;
    assign(K,
      cons_list(index_uni(size(x)),
        cons_list(index_uni(size(x)), nil_index_list())), (sq_alpha + delta),
      "assigning variable K");
    current_statement__ = 52;
    return cholesky_decompose(K);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct L_cov_exp_quad_ARD_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>,
T3__>, -1, -1>
operator()(const std::vector<Eigen::Matrix<T0__, -1, 1>>& x,
           const T1__& alpha, const T2__& rho, const T3__& delta,
           std::ostream* pstream__)  const 
{
return L_cov_exp_quad_ARD(x, alpha, rho, delta, pstream__);
}
};

class gp_fit_ARD_new_model final : public model_base_crtp<gp_fit_ARD_new_model> {

 private:
  int N;
  int D;
  std::vector<Eigen::Matrix<double, -1, 1>> x;
  Eigen::Matrix<double, -1, 1> y;
  Eigen::Matrix<double, -1, 1> z_test;
  double delta;
 
 public:
  ~gp_fit_ARD_new_model() { }
  
  inline std::string model_name() const final { return "gp_fit_ARD_new_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 b0a4f0db", "stancflags = "};
  }
  
  
  gp_fit_ARD_new_model(stan::io::var_context& context__,
                       unsigned int random_seed__ = 0,
                       std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "gp_fit_ARD_new_model_namespace::gp_fit_ARD_new_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 19;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 19;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 19;
      current_statement__ = 19;
      check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 20;
      context__.validate_dims("data initialization","D","int",
          context__.to_vec());
      D = std::numeric_limits<int>::min();
      
      current_statement__ = 20;
      D = context__.vals_i("D")[(1 - 1)];
      current_statement__ = 20;
      current_statement__ = 20;
      check_greater_or_equal(function__, "D", D, 1);
      current_statement__ = 21;
      validate_non_negative_index("x", "N", N);
      current_statement__ = 22;
      validate_non_negative_index("x", "D", D);
      current_statement__ = 23;
      context__.validate_dims("data initialization","x","double",
          context__.to_vec(N, D));
      x = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(D));
      stan::math::fill(x, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 23;
        assign(x_flat__, nil_index_list(), context__.vals_r("x"),
          "assigning variable x_flat__");
        current_statement__ = 23;
        pos__ = 1;
        current_statement__ = 23;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 23;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 23;
            assign(x,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              x_flat__[(pos__ - 1)], "assigning variable x");
            current_statement__ = 23;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 24;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 25;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(N));
      y = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 25;
        assign(y_flat__, nil_index_list(), context__.vals_r("y"),
          "assigning variable y_flat__");
        current_statement__ = 25;
        pos__ = 1;
        current_statement__ = 25;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 25;
          assign(y, cons_list(index_uni(sym1__), nil_index_list()),
            y_flat__[(pos__ - 1)], "assigning variable y");
          current_statement__ = 25;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 26;
      validate_non_negative_index("z_test", "N", N);
      current_statement__ = 27;
      context__.validate_dims("data initialization","z_test","double",
          context__.to_vec(N));
      z_test = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(z_test, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> z_test_flat__;
        current_statement__ = 27;
        assign(z_test_flat__, nil_index_list(), context__.vals_r("z_test"),
          "assigning variable z_test_flat__");
        current_statement__ = 27;
        pos__ = 1;
        current_statement__ = 27;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 27;
          assign(z_test, cons_list(index_uni(sym1__), nil_index_list()),
            z_test_flat__[(pos__ - 1)], "assigning variable z_test");
          current_statement__ = 27;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 28;
      delta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 29;
      delta = 0.000000001;
      current_statement__ = 30;
      validate_non_negative_index("rho", "D", D);
      current_statement__ = 31;
      validate_non_negative_index("eta", "N", N);
      current_statement__ = 32;
      validate_non_negative_index("f", "N", N);
      current_statement__ = 33;
      validate_non_negative_index("L_K", "N", N);
      current_statement__ = 34;
      validate_non_negative_index("L_K", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += D;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += N;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "gp_fit_ARD_new_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> rho;
      rho = Eigen::Matrix<local_scalar_t__, -1, 1>(D);
      stan::math::fill(rho, DUMMY_VAR__);
      
      current_statement__ = 1;
      rho = in__.vector(D);
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(rho, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(rho[(sym1__ - 1)], 0, lp__),
            "assigning variable rho");
        } else {
          current_statement__ = 1;
          assign(rho, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(rho[(sym1__ - 1)], 0),
            "assigning variable rho");
        }}
      local_scalar_t__ alpha;
      alpha = DUMMY_VAR__;
      
      current_statement__ = 2;
      alpha = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        alpha = stan::math::lb_constrain(alpha, 0, lp__);
      } else {
        current_statement__ = 2;
        alpha = stan::math::lb_constrain(alpha, 0);
      }
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      current_statement__ = 3;
      sigma = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        sigma = stan::math::lb_constrain(sigma, 0, lp__);
      } else {
        current_statement__ = 3;
        sigma = stan::math::lb_constrain(sigma, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> eta;
      eta = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(eta, DUMMY_VAR__);
      
      current_statement__ = 4;
      eta = in__.vector(N);
      Eigen::Matrix<local_scalar_t__, -1, 1> f;
      f = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(f, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> L_K;
      L_K = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
      stan::math::fill(L_K, DUMMY_VAR__);
      
      current_statement__ = 7;
      assign(L_K, nil_index_list(),
        L_cov_exp_quad_ARD(x, alpha, rho, delta, pstream__),
        "assigning variable L_K");
      current_statement__ = 8;
      assign(f, nil_index_list(), multiply(L_K, eta), "assigning variable f");
      {
        current_statement__ = 14;
        lp_accum__.add(inv_gamma_lpdf<propto__>(rho, 5, 5));
        current_statement__ = 15;
        lp_accum__.add(normal_lpdf<propto__>(alpha, 0, 1));
        current_statement__ = 16;
        lp_accum__.add(normal_lpdf<propto__>(sigma, 0, 1));
        current_statement__ = 17;
        lp_accum__.add(normal_lpdf<propto__>(eta, 0, 1));
        current_statement__ = 18;
        lp_accum__.add(normal_lpdf<propto__>(y, f, sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "gp_fit_ARD_new_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      Eigen::Matrix<double, -1, 1> rho;
      rho = Eigen::Matrix<double, -1, 1>(D);
      stan::math::fill(rho, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      rho = in__.vector(D);
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        current_statement__ = 1;
        assign(rho, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(rho[(sym1__ - 1)], 0),
          "assigning variable rho");}
      double alpha;
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      alpha = in__.scalar();
      current_statement__ = 2;
      alpha = stan::math::lb_constrain(alpha, 0);
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sigma = in__.scalar();
      current_statement__ = 3;
      sigma = stan::math::lb_constrain(sigma, 0);
      Eigen::Matrix<double, -1, 1> eta;
      eta = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(eta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      eta = in__.vector(N);
      Eigen::Matrix<double, -1, 1> f;
      f = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(f, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> L_K;
      L_K = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(L_K, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        vars__.emplace_back(rho[(sym1__ - 1)]);}
      vars__.emplace_back(alpha);
      vars__.emplace_back(sigma);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(eta[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 7;
      assign(L_K, nil_index_list(),
        L_cov_exp_quad_ARD(x, alpha, rho, delta, pstream__),
        "assigning variable L_K");
      current_statement__ = 8;
      assign(f, nil_index_list(), multiply(L_K, eta), "assigning variable f");
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(f[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(
              rvalue(L_K,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "L_K"));}}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double lik;
      lik = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      lik = 0;
      current_statement__ = 13;
      for (int observe_i = 1; observe_i <= N; ++observe_i) {
        current_statement__ = 11;
        lik = (lik +
                normal_lpdf<false>(z_test[(observe_i - 1)],
                  f[(observe_i - 1)], sigma));}
      vars__.emplace_back(lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> rho;
      rho = Eigen::Matrix<double, -1, 1>(D);
      stan::math::fill(rho, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> rho_flat__;
        current_statement__ = 1;
        assign(rho_flat__, nil_index_list(), context__.vals_r("rho"),
          "assigning variable rho_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 1;
          assign(rho, cons_list(index_uni(sym1__), nil_index_list()),
            rho_flat__[(pos__ - 1)], "assigning variable rho");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> rho_free__;
      rho_free__ = Eigen::Matrix<double, -1, 1>(D);
      stan::math::fill(rho_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        current_statement__ = 1;
        assign(rho_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(rho[(sym1__ - 1)], 0),
          "assigning variable rho_free__");}
      double alpha;
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      double alpha_free__;
      alpha_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      alpha_free__ = stan::math::lb_free(alpha, 0);
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      double sigma_free__;
      sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sigma_free__ = stan::math::lb_free(sigma, 0);
      Eigen::Matrix<double, -1, 1> eta;
      eta = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(eta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> eta_flat__;
        current_statement__ = 4;
        assign(eta_flat__, nil_index_list(), context__.vals_r("eta"),
          "assigning variable eta_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 4;
          assign(eta, cons_list(index_uni(sym1__), nil_index_list()),
            eta_flat__[(pos__ - 1)], "assigning variable eta");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        vars__.emplace_back(rho_free__[(sym1__ - 1)]);}
      vars__.emplace_back(alpha_free__);
      vars__.emplace_back(sigma_free__);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(eta[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("rho");
    names__.emplace_back("alpha");
    names__.emplace_back("sigma");
    names__.emplace_back("eta");
    names__.emplace_back("f");
    names__.emplace_back("L_K");
    names__.emplace_back("lik");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(D)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rho" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "eta" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "f" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "L_K" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "lik");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rho" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "eta" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "f" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "L_K" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "lik");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"rho\",\"type\":{\"name\":\"vector\",\"length\":" << D << "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"L_K\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"lik\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"rho\",\"type\":{\"name\":\"vector\",\"length\":" << D << "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"L_K\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"lik\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        

};
}
using stan_model = gp_fit_ARD_new_model_namespace::gp_fit_ARD_new_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return gp_fit_ARD_new_model_namespace::profiles__;
}

#endif


